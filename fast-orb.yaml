version: 2.1
description: >
  Run FAST with CI_MODE=testing. Run security specs based on previously recorded test record using test_record_id.
  You can find source code of this orb on Github: https://github.com/wallarm/fast-orb 

commands:
  run_security_tests:
    description: >
      Start FAST container in testing mode.

    parameters:
      wallarm-api-host:
        type: string
        default: api.wallarm.com
        description: >
          Wallarm API host.

      test_app_uri:
        type: string
        description: >
          Application uri. Must be started with http or https and be visible for FAST docker container.

      test_record_id:
        type: string
        description: >
          Test record id (can be given in Wallarm Cloud).

      policy_id:
        type: string
        default: ""
        description: >
          Policy id (can be given in Wallarm Cloud). With empty value test run will be use default policy.

    steps:
      - run:
          name: Setup fast.env file
          command: |
            echo WALLARM_API_TOKEN=$WALLARM_API_TOKEN \>> fast.env
            echo WALLARM_API_HOST=<<parameters.wallarm-api-host>> \>> fast.env
            echo CI_MODE=testing \>> fast.env

            echo TEST_RUN_URI=<<parameters.test_app_uri>> \>> fast.env
            echo TEST_RECORD_ID=<<parameters.test_record_id>> \>> fast.env
            if [ <<parameters.policy_id>> ] ; then echo "TEST_RUN_POLICY_ID=<<parameters.policy_id>>" \>> fast.env ; fi
            
      - run: 
          name: Run security tests.
          command: |
            docker run --name fast --env-file=fast.env -p 8080:8080 wallarm/fast

examples:
  fast-example-rails:
    description: |
      Example using Wallarm's FAST to run tests against a Rails app using Rspec, Capybara, and Selenium. Taken from https://github.com/wallarm/fast-examples-rails.
    usage:
      version: 2.1
      orbs:
        fast: wallarm/fast@dev:x.y.z
      jobs:
        build:
          machine:
            image: ubuntu-1604:201903-01

          steps:
            - checkout

            - run:
                name: Build docker
                command: |
                  docker build -t app-test .

            - run:
                name: Run application
                command: |
                  docker run -d --name app-test -p 3000:3000 app-test

            # On this step we need to save ip-address of application
            #    which is determined in 'bridge' docker network by deafult.
            # To use env-variable between Circle CI steps we need to save it in $BASH_ENV. 
            - run:
                name: Set application ip into env variable
                command: |
                  echo "export APP_TEST_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' app-test)" >> $BASH_ENV

            - fast/run_security_tests:
                test_app_uri: http://$APP_TEST_HOST:3000
                test_record_id: "<test_record_id>"
